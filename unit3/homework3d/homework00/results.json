{
    "tests": [
        {
            "score": 0,
            "max_score": 4,
            "name": "test_homework0.py::test_1_person_35_tip",
            "output": "\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x10ca57e90>\ncapsys = <_pytest.capture.CaptureFixture object at 0x10ca8de50>\n\n    @max_score(4)\n    def test_1_person_35_tip(monkeypatch, capsys):\n>   \tmake_test([1, 35], ['0', '0', '1', '113.10', '113.10', '9.83'], default_constants)(monkeypatch, capsys)\n\ntest_homework0.py:87: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\n/Users/prestonraab/.local/lib/python3.11/site-packages/byu_pytest_utils/utils.py:73: in new_test_function\n    return test_function(func, *args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nmain = <function main at 0x10d7c4cc0>, monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x10ca57e90>\ncapsys = <_pytest.capture.CaptureFixture object at 0x10ca8de50>\nconstants = {'COST_LARGE': 14.68, 'COST_MEDIUM': 11.48, 'COST_SMALL': 7.28, 'DIAMETER_LARGE': 20, ...}\n\n    @with_import_constant(\"homework0\", \"PEOPLE_PER_LARGE\")\n    @with_import_constant(\"homework0\", \"PEOPLE_PER_MEDIUM\")\n    @with_import_constant(\"homework0\", \"PEOPLE_PER_SMALL\")\n    @with_import_constant(\"homework0\", \"DIAMETER_LARGE\")\n    @with_import_constant(\"homework0\", \"DIAMETER_MEDIUM\")\n    @with_import_constant(\"homework0\", \"DIAMETER_SMALL\")\n    @with_import_constant(\"homework0\", \"COST_LARGE\")\n    @with_import_constant(\"homework0\", \"COST_MEDIUM\")\n    @with_import_constant(\"homework0\", \"COST_SMALL\")\n    @with_import_constant(\"homework0\", \"PI\")\n    @with_import(\"homework0\", \"main\")\n    def test(main, monkeypatch, capsys, constants=dict()):\n        monkeypatch.setattr(builtins, 'input', mocked_input_maker(numPeople, tipPercent))\n    \n        # merge in the globals from imported main, in order to keep necessary namespace\n        imported_globals = main.__globals__\n        home_globals = globals()\n        merged_globals = imported_globals | home_globals\n    \n        # Change the globals referred to by the main function to the globals of this module\n        # This is done by making a new function object, since __globals__ is read-only\n        main = copy_func(main, merged_globals, module=__name__)\n    \n        main()\n    \n    \n        observed = capsys.readouterr().out\n        expected = f\"Please enter how many guests to order for:\\n{nLarge} large pizzas, {nMedium} medium pizzas, and {nSmall} small pizzas will be needed.\\n\\nA total of {totalArea} square inches of pizza will be ordered ({indvArea} per guest).\\nPlease enter the tip as a percentage (i.e. 10 means 10%):\\nThe total cost of the event will be: ${totalCost}.\\n\\n\"\n>       assert observed == expected\nE       AssertionError: assert '' == 'Please enter...e: $9.83.\\n\\n'\nE         - Please enter how many guests to order for:\nE         - 0 large pizzas, 0 medium pizzas, and 1 small pizzas will be needed.\nE         - \nE         - A total of 113.10 square inches of pizza will be ordered (113.10 per guest).\nE         - Please enter the tip as a percentage (i.e. 10 means 10%):\nE         - The total cost of the event will be: $9.83.\nE         -\n\ntest_homework0.py:80: AssertionError",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 4,
            "name": "test_homework0.py::test_3_person_80_tip",
            "output": "\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x111959d90>\ncapsys = <_pytest.capture.CaptureFixture object at 0x111959e50>\n\n    @max_score(4)\n    def test_3_person_80_tip(monkeypatch, capsys):\n>   \tmake_test([3, 80], ['0', '1', '0', '201.06', '67.02', '20.66'], default_constants)(monkeypatch, capsys)\n\ntest_homework0.py:91: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\n/Users/prestonraab/.local/lib/python3.11/site-packages/byu_pytest_utils/utils.py:73: in new_test_function\n    return test_function(func, *args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nmain = <function main at 0x10d7d9e40>, monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x111959d90>\ncapsys = <_pytest.capture.CaptureFixture object at 0x111959e50>\nconstants = {'COST_LARGE': 14.68, 'COST_MEDIUM': 11.48, 'COST_SMALL': 7.28, 'DIAMETER_LARGE': 20, ...}\n\n    @with_import_constant(\"homework0\", \"PEOPLE_PER_LARGE\")\n    @with_import_constant(\"homework0\", \"PEOPLE_PER_MEDIUM\")\n    @with_import_constant(\"homework0\", \"PEOPLE_PER_SMALL\")\n    @with_import_constant(\"homework0\", \"DIAMETER_LARGE\")\n    @with_import_constant(\"homework0\", \"DIAMETER_MEDIUM\")\n    @with_import_constant(\"homework0\", \"DIAMETER_SMALL\")\n    @with_import_constant(\"homework0\", \"COST_LARGE\")\n    @with_import_constant(\"homework0\", \"COST_MEDIUM\")\n    @with_import_constant(\"homework0\", \"COST_SMALL\")\n    @with_import_constant(\"homework0\", \"PI\")\n    @with_import(\"homework0\", \"main\")\n    def test(main, monkeypatch, capsys, constants=dict()):\n        monkeypatch.setattr(builtins, 'input', mocked_input_maker(numPeople, tipPercent))\n    \n        # merge in the globals from imported main, in order to keep necessary namespace\n        imported_globals = main.__globals__\n        home_globals = globals()\n        merged_globals = imported_globals | home_globals\n    \n        # Change the globals referred to by the main function to the globals of this module\n        # This is done by making a new function object, since __globals__ is read-only\n        main = copy_func(main, merged_globals, module=__name__)\n    \n        main()\n    \n    \n        observed = capsys.readouterr().out\n        expected = f\"Please enter how many guests to order for:\\n{nLarge} large pizzas, {nMedium} medium pizzas, and {nSmall} small pizzas will be needed.\\n\\nA total of {totalArea} square inches of pizza will be ordered ({indvArea} per guest).\\nPlease enter the tip as a percentage (i.e. 10 means 10%):\\nThe total cost of the event will be: ${totalCost}.\\n\\n\"\n>       assert observed == expected\nE       AssertionError: assert '' == 'Please enter...: $20.66.\\n\\n'\nE         - Please enter how many guests to order for:\nE         - 0 large pizzas, 1 medium pizzas, and 0 small pizzas will be needed.\nE         - \nE         - A total of 201.06 square inches of pizza will be ordered (67.02 per guest).\nE         - Please enter the tip as a percentage (i.e. 10 means 10%):\nE         - The total cost of the event will be: $20.66.\nE         -\n\ntest_homework0.py:80: AssertionError",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 4,
            "name": "test_homework0.py::test_7_person_80_tip",
            "output": "\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x111944590>\ncapsys = <_pytest.capture.CaptureFixture object at 0x111945310>\n\n    @max_score(4)\n    def test_7_person_80_tip(monkeypatch, capsys):\n>   \tmake_test([7, 80], ['1', '0', '0', '314.16', '44.88', '26.42'], default_constants)(monkeypatch, capsys)\n\ntest_homework0.py:95: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\n/Users/prestonraab/.local/lib/python3.11/site-packages/byu_pytest_utils/utils.py:73: in new_test_function\n    return test_function(func, *args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nmain = <function main at 0x10d7da700>, monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x111944590>\ncapsys = <_pytest.capture.CaptureFixture object at 0x111945310>\nconstants = {'COST_LARGE': 14.68, 'COST_MEDIUM': 11.48, 'COST_SMALL': 7.28, 'DIAMETER_LARGE': 20, ...}\n\n    @with_import_constant(\"homework0\", \"PEOPLE_PER_LARGE\")\n    @with_import_constant(\"homework0\", \"PEOPLE_PER_MEDIUM\")\n    @with_import_constant(\"homework0\", \"PEOPLE_PER_SMALL\")\n    @with_import_constant(\"homework0\", \"DIAMETER_LARGE\")\n    @with_import_constant(\"homework0\", \"DIAMETER_MEDIUM\")\n    @with_import_constant(\"homework0\", \"DIAMETER_SMALL\")\n    @with_import_constant(\"homework0\", \"COST_LARGE\")\n    @with_import_constant(\"homework0\", \"COST_MEDIUM\")\n    @with_import_constant(\"homework0\", \"COST_SMALL\")\n    @with_import_constant(\"homework0\", \"PI\")\n    @with_import(\"homework0\", \"main\")\n    def test(main, monkeypatch, capsys, constants=dict()):\n        monkeypatch.setattr(builtins, 'input', mocked_input_maker(numPeople, tipPercent))\n    \n        # merge in the globals from imported main, in order to keep necessary namespace\n        imported_globals = main.__globals__\n        home_globals = globals()\n        merged_globals = imported_globals | home_globals\n    \n        # Change the globals referred to by the main function to the globals of this module\n        # This is done by making a new function object, since __globals__ is read-only\n        main = copy_func(main, merged_globals, module=__name__)\n    \n        main()\n    \n    \n        observed = capsys.readouterr().out\n        expected = f\"Please enter how many guests to order for:\\n{nLarge} large pizzas, {nMedium} medium pizzas, and {nSmall} small pizzas will be needed.\\n\\nA total of {totalArea} square inches of pizza will be ordered ({indvArea} per guest).\\nPlease enter the tip as a percentage (i.e. 10 means 10%):\\nThe total cost of the event will be: ${totalCost}.\\n\\n\"\n>       assert observed == expected\nE       AssertionError: assert '' == 'Please enter...: $26.42.\\n\\n'\nE         - Please enter how many guests to order for:\nE         - 1 large pizzas, 0 medium pizzas, and 0 small pizzas will be needed.\nE         - \nE         - A total of 314.16 square inches of pizza will be ordered (44.88 per guest).\nE         - Please enter the tip as a percentage (i.e. 10 means 10%):\nE         - The total cost of the event will be: $26.42.\nE         -\n\ntest_homework0.py:80: AssertionError",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 4,
            "name": "test_homework0.py::test_4_person_35_tip",
            "output": "\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x111911710>\ncapsys = <_pytest.capture.CaptureFixture object at 0x111910ed0>\n\n    @max_score(4)\n    def test_4_person_35_tip(monkeypatch, capsys):\n>   \tmake_test([4, 35], ['0', '1', '1', '314.16', '78.54', '25.33'], default_constants)(monkeypatch, capsys)\n\ntest_homework0.py:99: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\n/Users/prestonraab/.local/lib/python3.11/site-packages/byu_pytest_utils/utils.py:73: in new_test_function\n    return test_function(func, *args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nmain = <function main at 0x10d7da7a0>, monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x111911710>\ncapsys = <_pytest.capture.CaptureFixture object at 0x111910ed0>\nconstants = {'COST_LARGE': 14.68, 'COST_MEDIUM': 11.48, 'COST_SMALL': 7.28, 'DIAMETER_LARGE': 20, ...}\n\n    @with_import_constant(\"homework0\", \"PEOPLE_PER_LARGE\")\n    @with_import_constant(\"homework0\", \"PEOPLE_PER_MEDIUM\")\n    @with_import_constant(\"homework0\", \"PEOPLE_PER_SMALL\")\n    @with_import_constant(\"homework0\", \"DIAMETER_LARGE\")\n    @with_import_constant(\"homework0\", \"DIAMETER_MEDIUM\")\n    @with_import_constant(\"homework0\", \"DIAMETER_SMALL\")\n    @with_import_constant(\"homework0\", \"COST_LARGE\")\n    @with_import_constant(\"homework0\", \"COST_MEDIUM\")\n    @with_import_constant(\"homework0\", \"COST_SMALL\")\n    @with_import_constant(\"homework0\", \"PI\")\n    @with_import(\"homework0\", \"main\")\n    def test(main, monkeypatch, capsys, constants=dict()):\n        monkeypatch.setattr(builtins, 'input', mocked_input_maker(numPeople, tipPercent))\n    \n        # merge in the globals from imported main, in order to keep necessary namespace\n        imported_globals = main.__globals__\n        home_globals = globals()\n        merged_globals = imported_globals | home_globals\n    \n        # Change the globals referred to by the main function to the globals of this module\n        # This is done by making a new function object, since __globals__ is read-only\n        main = copy_func(main, merged_globals, module=__name__)\n    \n        main()\n    \n    \n        observed = capsys.readouterr().out\n        expected = f\"Please enter how many guests to order for:\\n{nLarge} large pizzas, {nMedium} medium pizzas, and {nSmall} small pizzas will be needed.\\n\\nA total of {totalArea} square inches of pizza will be ordered ({indvArea} per guest).\\nPlease enter the tip as a percentage (i.e. 10 means 10%):\\nThe total cost of the event will be: ${totalCost}.\\n\\n\"\n>       assert observed == expected\nE       AssertionError: assert '' == 'Please enter...: $25.33.\\n\\n'\nE         - Please enter how many guests to order for:\nE         - 0 large pizzas, 1 medium pizzas, and 1 small pizzas will be needed.\nE         - \nE         - A total of 314.16 square inches of pizza will be ordered (78.54 per guest).\nE         - Please enter the tip as a percentage (i.e. 10 means 10%):\nE         - The total cost of the event will be: $25.33.\nE         -\n\ntest_homework0.py:80: AssertionError",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 4,
            "name": "test_homework0.py::test_8_person_80_tip",
            "output": "\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x111950b90>\ncapsys = <_pytest.capture.CaptureFixture object at 0x111950450>\n\n    @max_score(4)\n    def test_8_person_80_tip(monkeypatch, capsys):\n>   \tmake_test([8, 80], ['1', '0', '1', '427.26', '53.41', '39.53'], default_constants)(monkeypatch, capsys)\n\ntest_homework0.py:103: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\n/Users/prestonraab/.local/lib/python3.11/site-packages/byu_pytest_utils/utils.py:73: in new_test_function\n    return test_function(func, *args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nmain = <function main at 0x10d7db420>, monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x111950b90>\ncapsys = <_pytest.capture.CaptureFixture object at 0x111950450>\nconstants = {'COST_LARGE': 14.68, 'COST_MEDIUM': 11.48, 'COST_SMALL': 7.28, 'DIAMETER_LARGE': 20, ...}\n\n    @with_import_constant(\"homework0\", \"PEOPLE_PER_LARGE\")\n    @with_import_constant(\"homework0\", \"PEOPLE_PER_MEDIUM\")\n    @with_import_constant(\"homework0\", \"PEOPLE_PER_SMALL\")\n    @with_import_constant(\"homework0\", \"DIAMETER_LARGE\")\n    @with_import_constant(\"homework0\", \"DIAMETER_MEDIUM\")\n    @with_import_constant(\"homework0\", \"DIAMETER_SMALL\")\n    @with_import_constant(\"homework0\", \"COST_LARGE\")\n    @with_import_constant(\"homework0\", \"COST_MEDIUM\")\n    @with_import_constant(\"homework0\", \"COST_SMALL\")\n    @with_import_constant(\"homework0\", \"PI\")\n    @with_import(\"homework0\", \"main\")\n    def test(main, monkeypatch, capsys, constants=dict()):\n        monkeypatch.setattr(builtins, 'input', mocked_input_maker(numPeople, tipPercent))\n    \n        # merge in the globals from imported main, in order to keep necessary namespace\n        imported_globals = main.__globals__\n        home_globals = globals()\n        merged_globals = imported_globals | home_globals\n    \n        # Change the globals referred to by the main function to the globals of this module\n        # This is done by making a new function object, since __globals__ is read-only\n        main = copy_func(main, merged_globals, module=__name__)\n    \n        main()\n    \n    \n        observed = capsys.readouterr().out\n        expected = f\"Please enter how many guests to order for:\\n{nLarge} large pizzas, {nMedium} medium pizzas, and {nSmall} small pizzas will be needed.\\n\\nA total of {totalArea} square inches of pizza will be ordered ({indvArea} per guest).\\nPlease enter the tip as a percentage (i.e. 10 means 10%):\\nThe total cost of the event will be: ${totalCost}.\\n\\n\"\n>       assert observed == expected\nE       AssertionError: assert '' == 'Please enter...: $39.53.\\n\\n'\nE         - Please enter how many guests to order for:\nE         - 1 large pizzas, 0 medium pizzas, and 1 small pizzas will be needed.\nE         - \nE         - A total of 427.26 square inches of pizza will be ordered (53.41 per guest).\nE         - Please enter the tip as a percentage (i.e. 10 means 10%):\nE         - The total cost of the event will be: $39.53.\nE         -\n\ntest_homework0.py:80: AssertionError",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 4,
            "name": "test_homework0.py::test_10_person_35_tip",
            "output": "\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x11194f510>\ncapsys = <_pytest.capture.CaptureFixture object at 0x11194ec90>\n\n    @max_score(4)\n    def test_10_person_35_tip(monkeypatch, capsys):\n>   \tmake_test([10, 35], ['1', '1', '0', '515.22', '51.52', '35.32'], default_constants)(monkeypatch, capsys)\n\ntest_homework0.py:107: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\n/Users/prestonraab/.local/lib/python3.11/site-packages/byu_pytest_utils/utils.py:73: in new_test_function\n    return test_function(func, *args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nmain = <function main at 0x10d7dbd80>, monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x11194f510>\ncapsys = <_pytest.capture.CaptureFixture object at 0x11194ec90>\nconstants = {'COST_LARGE': 14.68, 'COST_MEDIUM': 11.48, 'COST_SMALL': 7.28, 'DIAMETER_LARGE': 20, ...}\n\n    @with_import_constant(\"homework0\", \"PEOPLE_PER_LARGE\")\n    @with_import_constant(\"homework0\", \"PEOPLE_PER_MEDIUM\")\n    @with_import_constant(\"homework0\", \"PEOPLE_PER_SMALL\")\n    @with_import_constant(\"homework0\", \"DIAMETER_LARGE\")\n    @with_import_constant(\"homework0\", \"DIAMETER_MEDIUM\")\n    @with_import_constant(\"homework0\", \"DIAMETER_SMALL\")\n    @with_import_constant(\"homework0\", \"COST_LARGE\")\n    @with_import_constant(\"homework0\", \"COST_MEDIUM\")\n    @with_import_constant(\"homework0\", \"COST_SMALL\")\n    @with_import_constant(\"homework0\", \"PI\")\n    @with_import(\"homework0\", \"main\")\n    def test(main, monkeypatch, capsys, constants=dict()):\n        monkeypatch.setattr(builtins, 'input', mocked_input_maker(numPeople, tipPercent))\n    \n        # merge in the globals from imported main, in order to keep necessary namespace\n        imported_globals = main.__globals__\n        home_globals = globals()\n        merged_globals = imported_globals | home_globals\n    \n        # Change the globals referred to by the main function to the globals of this module\n        # This is done by making a new function object, since __globals__ is read-only\n        main = copy_func(main, merged_globals, module=__name__)\n    \n        main()\n    \n    \n        observed = capsys.readouterr().out\n        expected = f\"Please enter how many guests to order for:\\n{nLarge} large pizzas, {nMedium} medium pizzas, and {nSmall} small pizzas will be needed.\\n\\nA total of {totalArea} square inches of pizza will be ordered ({indvArea} per guest).\\nPlease enter the tip as a percentage (i.e. 10 means 10%):\\nThe total cost of the event will be: ${totalCost}.\\n\\n\"\n>       assert observed == expected\nE       AssertionError: assert '' == 'Please enter...: $35.32.\\n\\n'\nE         - Please enter how many guests to order for:\nE         - 1 large pizzas, 1 medium pizzas, and 0 small pizzas will be needed.\nE         - \nE         - A total of 515.22 square inches of pizza will be ordered (51.52 per guest).\nE         - Please enter the tip as a percentage (i.e. 10 means 10%):\nE         - The total cost of the event will be: $35.32.\nE         -\n\ntest_homework0.py:80: AssertionError",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 4,
            "name": "test_homework0.py::test_11_person_10_tip",
            "output": "\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x1119545d0>\ncapsys = <_pytest.capture.CaptureFixture object at 0x111956250>\n\n    @max_score(4)\n    def test_11_person_10_tip(monkeypatch, capsys):\n>   \tmake_test([11, 10], ['1', '1', '1', '628.32', '57.12', '36.78'], default_constants)(monkeypatch, capsys)\n\ntest_homework0.py:111: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\n/Users/prestonraab/.local/lib/python3.11/site-packages/byu_pytest_utils/utils.py:73: in new_test_function\n    return test_function(func, *args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nmain = <function main at 0x10d7da2a0>, monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x1119545d0>\ncapsys = <_pytest.capture.CaptureFixture object at 0x111956250>\nconstants = {'COST_LARGE': 14.68, 'COST_MEDIUM': 11.48, 'COST_SMALL': 7.28, 'DIAMETER_LARGE': 20, ...}\n\n    @with_import_constant(\"homework0\", \"PEOPLE_PER_LARGE\")\n    @with_import_constant(\"homework0\", \"PEOPLE_PER_MEDIUM\")\n    @with_import_constant(\"homework0\", \"PEOPLE_PER_SMALL\")\n    @with_import_constant(\"homework0\", \"DIAMETER_LARGE\")\n    @with_import_constant(\"homework0\", \"DIAMETER_MEDIUM\")\n    @with_import_constant(\"homework0\", \"DIAMETER_SMALL\")\n    @with_import_constant(\"homework0\", \"COST_LARGE\")\n    @with_import_constant(\"homework0\", \"COST_MEDIUM\")\n    @with_import_constant(\"homework0\", \"COST_SMALL\")\n    @with_import_constant(\"homework0\", \"PI\")\n    @with_import(\"homework0\", \"main\")\n    def test(main, monkeypatch, capsys, constants=dict()):\n        monkeypatch.setattr(builtins, 'input', mocked_input_maker(numPeople, tipPercent))\n    \n        # merge in the globals from imported main, in order to keep necessary namespace\n        imported_globals = main.__globals__\n        home_globals = globals()\n        merged_globals = imported_globals | home_globals\n    \n        # Change the globals referred to by the main function to the globals of this module\n        # This is done by making a new function object, since __globals__ is read-only\n        main = copy_func(main, merged_globals, module=__name__)\n    \n        main()\n    \n    \n        observed = capsys.readouterr().out\n        expected = f\"Please enter how many guests to order for:\\n{nLarge} large pizzas, {nMedium} medium pizzas, and {nSmall} small pizzas will be needed.\\n\\nA total of {totalArea} square inches of pizza will be ordered ({indvArea} per guest).\\nPlease enter the tip as a percentage (i.e. 10 means 10%):\\nThe total cost of the event will be: ${totalCost}.\\n\\n\"\n>       assert observed == expected\nE       AssertionError: assert '' == 'Please enter...: $36.78.\\n\\n'\nE         - Please enter how many guests to order for:\nE         - 1 large pizzas, 1 medium pizzas, and 1 small pizzas will be needed.\nE         - \nE         - A total of 628.32 square inches of pizza will be ordered (57.12 per guest).\nE         - Please enter the tip as a percentage (i.e. 10 means 10%):\nE         - The total cost of the event will be: $36.78.\nE         -\n\ntest_homework0.py:80: AssertionError",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 4,
            "name": "test_homework0.py::test_12_person_80_tip",
            "output": "\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x11195b3d0>\ncapsys = <_pytest.capture.CaptureFixture object at 0x11195b490>\n\n    @max_score(4)\n    def test_12_person_80_tip(monkeypatch, capsys):\n>   \tmake_test([12, 80], ['1', '1', '2', '741.42', '61.78', '73.30'], default_constants)(monkeypatch, capsys)\n\ntest_homework0.py:115: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\n/Users/prestonraab/.local/lib/python3.11/site-packages/byu_pytest_utils/utils.py:73: in new_test_function\n    return test_function(func, *args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nmain = <function main at 0x10d7db4c0>, monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x11195b3d0>\ncapsys = <_pytest.capture.CaptureFixture object at 0x11195b490>\nconstants = {'COST_LARGE': 14.68, 'COST_MEDIUM': 11.48, 'COST_SMALL': 7.28, 'DIAMETER_LARGE': 20, ...}\n\n    @with_import_constant(\"homework0\", \"PEOPLE_PER_LARGE\")\n    @with_import_constant(\"homework0\", \"PEOPLE_PER_MEDIUM\")\n    @with_import_constant(\"homework0\", \"PEOPLE_PER_SMALL\")\n    @with_import_constant(\"homework0\", \"DIAMETER_LARGE\")\n    @with_import_constant(\"homework0\", \"DIAMETER_MEDIUM\")\n    @with_import_constant(\"homework0\", \"DIAMETER_SMALL\")\n    @with_import_constant(\"homework0\", \"COST_LARGE\")\n    @with_import_constant(\"homework0\", \"COST_MEDIUM\")\n    @with_import_constant(\"homework0\", \"COST_SMALL\")\n    @with_import_constant(\"homework0\", \"PI\")\n    @with_import(\"homework0\", \"main\")\n    def test(main, monkeypatch, capsys, constants=dict()):\n        monkeypatch.setattr(builtins, 'input', mocked_input_maker(numPeople, tipPercent))\n    \n        # merge in the globals from imported main, in order to keep necessary namespace\n        imported_globals = main.__globals__\n        home_globals = globals()\n        merged_globals = imported_globals | home_globals\n    \n        # Change the globals referred to by the main function to the globals of this module\n        # This is done by making a new function object, since __globals__ is read-only\n        main = copy_func(main, merged_globals, module=__name__)\n    \n        main()\n    \n    \n        observed = capsys.readouterr().out\n        expected = f\"Please enter how many guests to order for:\\n{nLarge} large pizzas, {nMedium} medium pizzas, and {nSmall} small pizzas will be needed.\\n\\nA total of {totalArea} square inches of pizza will be ordered ({indvArea} per guest).\\nPlease enter the tip as a percentage (i.e. 10 means 10%):\\nThe total cost of the event will be: ${totalCost}.\\n\\n\"\n>       assert observed == expected\nE       AssertionError: assert '' == 'Please enter...: $73.30.\\n\\n'\nE         - Please enter how many guests to order for:\nE         - 1 large pizzas, 1 medium pizzas, and 2 small pizzas will be needed.\nE         - \nE         - A total of 741.42 square inches of pizza will be ordered (61.78 per guest).\nE         - Please enter the tip as a percentage (i.e. 10 means 10%):\nE         - The total cost of the event will be: $73.30.\nE         -\n\ntest_homework0.py:80: AssertionError",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 4,
            "name": "test_homework0.py::test_13_person_80_tip",
            "output": "\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x10d72e9d0>\ncapsys = <_pytest.capture.CaptureFixture object at 0x10d79aa50>\n\n    @max_score(4)\n    def test_13_person_80_tip(monkeypatch, capsys):\n>   \tmake_test([13, 80], ['1', '2', '0', '716.28', '55.10', '67.75'], default_constants)(monkeypatch, capsys)\n\ntest_homework0.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\n/Users/prestonraab/.local/lib/python3.11/site-packages/byu_pytest_utils/utils.py:73: in new_test_function\n    return test_function(func, *args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nmain = <function main at 0x11199c040>, monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x10d72e9d0>\ncapsys = <_pytest.capture.CaptureFixture object at 0x10d79aa50>\nconstants = {'COST_LARGE': 14.68, 'COST_MEDIUM': 11.48, 'COST_SMALL': 7.28, 'DIAMETER_LARGE': 20, ...}\n\n    @with_import_constant(\"homework0\", \"PEOPLE_PER_LARGE\")\n    @with_import_constant(\"homework0\", \"PEOPLE_PER_MEDIUM\")\n    @with_import_constant(\"homework0\", \"PEOPLE_PER_SMALL\")\n    @with_import_constant(\"homework0\", \"DIAMETER_LARGE\")\n    @with_import_constant(\"homework0\", \"DIAMETER_MEDIUM\")\n    @with_import_constant(\"homework0\", \"DIAMETER_SMALL\")\n    @with_import_constant(\"homework0\", \"COST_LARGE\")\n    @with_import_constant(\"homework0\", \"COST_MEDIUM\")\n    @with_import_constant(\"homework0\", \"COST_SMALL\")\n    @with_import_constant(\"homework0\", \"PI\")\n    @with_import(\"homework0\", \"main\")\n    def test(main, monkeypatch, capsys, constants=dict()):\n        monkeypatch.setattr(builtins, 'input', mocked_input_maker(numPeople, tipPercent))\n    \n        # merge in the globals from imported main, in order to keep necessary namespace\n        imported_globals = main.__globals__\n        home_globals = globals()\n        merged_globals = imported_globals | home_globals\n    \n        # Change the globals referred to by the main function to the globals of this module\n        # This is done by making a new function object, since __globals__ is read-only\n        main = copy_func(main, merged_globals, module=__name__)\n    \n        main()\n    \n    \n        observed = capsys.readouterr().out\n        expected = f\"Please enter how many guests to order for:\\n{nLarge} large pizzas, {nMedium} medium pizzas, and {nSmall} small pizzas will be needed.\\n\\nA total of {totalArea} square inches of pizza will be ordered ({indvArea} per guest).\\nPlease enter the tip as a percentage (i.e. 10 means 10%):\\nThe total cost of the event will be: ${totalCost}.\\n\\n\"\n>       assert observed == expected\nE       AssertionError: assert '' == 'Please enter...: $67.75.\\n\\n'\nE         - Please enter how many guests to order for:\nE         - 1 large pizzas, 2 medium pizzas, and 0 small pizzas will be needed.\nE         - \nE         - A total of 716.28 square inches of pizza will be ordered (55.10 per guest).\nE         - Please enter the tip as a percentage (i.e. 10 means 10%):\nE         - The total cost of the event will be: $67.75.\nE         -\n\ntest_homework0.py:80: AssertionError",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 4,
            "name": "test_homework0.py::test_14_person_10_tip",
            "output": "\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x111941010>\ncapsys = <_pytest.capture.CaptureFixture object at 0x1119427d0>\n\n    @max_score(4)\n    def test_14_person_10_tip(monkeypatch, capsys):\n>   \tmake_test([14, 10], ['2', '0', '0', '628.32', '44.88', '32.30'], default_constants)(monkeypatch, capsys)\n\ntest_homework0.py:123: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\n/Users/prestonraab/.local/lib/python3.11/site-packages/byu_pytest_utils/utils.py:73: in new_test_function\n    return test_function(func, *args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nmain = <function main at 0x11199c400>, monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x111941010>\ncapsys = <_pytest.capture.CaptureFixture object at 0x1119427d0>\nconstants = {'COST_LARGE': 14.68, 'COST_MEDIUM': 11.48, 'COST_SMALL': 7.28, 'DIAMETER_LARGE': 20, ...}\n\n    @with_import_constant(\"homework0\", \"PEOPLE_PER_LARGE\")\n    @with_import_constant(\"homework0\", \"PEOPLE_PER_MEDIUM\")\n    @with_import_constant(\"homework0\", \"PEOPLE_PER_SMALL\")\n    @with_import_constant(\"homework0\", \"DIAMETER_LARGE\")\n    @with_import_constant(\"homework0\", \"DIAMETER_MEDIUM\")\n    @with_import_constant(\"homework0\", \"DIAMETER_SMALL\")\n    @with_import_constant(\"homework0\", \"COST_LARGE\")\n    @with_import_constant(\"homework0\", \"COST_MEDIUM\")\n    @with_import_constant(\"homework0\", \"COST_SMALL\")\n    @with_import_constant(\"homework0\", \"PI\")\n    @with_import(\"homework0\", \"main\")\n    def test(main, monkeypatch, capsys, constants=dict()):\n        monkeypatch.setattr(builtins, 'input', mocked_input_maker(numPeople, tipPercent))\n    \n        # merge in the globals from imported main, in order to keep necessary namespace\n        imported_globals = main.__globals__\n        home_globals = globals()\n        merged_globals = imported_globals | home_globals\n    \n        # Change the globals referred to by the main function to the globals of this module\n        # This is done by making a new function object, since __globals__ is read-only\n        main = copy_func(main, merged_globals, module=__name__)\n    \n        main()\n    \n    \n        observed = capsys.readouterr().out\n        expected = f\"Please enter how many guests to order for:\\n{nLarge} large pizzas, {nMedium} medium pizzas, and {nSmall} small pizzas will be needed.\\n\\nA total of {totalArea} square inches of pizza will be ordered ({indvArea} per guest).\\nPlease enter the tip as a percentage (i.e. 10 means 10%):\\nThe total cost of the event will be: ${totalCost}.\\n\\n\"\n>       assert observed == expected\nE       AssertionError: assert '' == 'Please enter...: $32.30.\\n\\n'\nE         - Please enter how many guests to order for:\nE         - 2 large pizzas, 0 medium pizzas, and 0 small pizzas will be needed.\nE         - \nE         - A total of 628.32 square inches of pizza will be ordered (44.88 per guest).\nE         - Please enter the tip as a percentage (i.e. 10 means 10%):\nE         - The total cost of the event will be: $32.30.\nE         -\n\ntest_homework0.py:80: AssertionError",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 2,
            "name": "test_homework0.py::test_15_person_35_tip",
            "output": "\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x11194ea90>\ncapsys = <_pytest.capture.CaptureFixture object at 0x11194f110>\n\n    @max_score(2)\n    def test_15_person_35_tip(monkeypatch, capsys):\n>   \tmake_test([15, 35], ['1', '0', '1', '3418.05', '227.87', '59.29'], doubled_constants)(monkeypatch, capsys)\n\ntest_homework0.py:129: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\n/Users/prestonraab/.local/lib/python3.11/site-packages/byu_pytest_utils/utils.py:73: in new_test_function\n    return test_function(func, *args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nmain = <function main at 0x10d7db060>, monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x11194ea90>\ncapsys = <_pytest.capture.CaptureFixture object at 0x11194f110>\nconstants = {'COST_LARGE': 14.68, 'COST_MEDIUM': 11.48, 'COST_SMALL': 7.28, 'DIAMETER_LARGE': 20, ...}\n\n    @with_import_constant(\"homework0\", \"PEOPLE_PER_LARGE\")\n    @with_import_constant(\"homework0\", \"PEOPLE_PER_MEDIUM\")\n    @with_import_constant(\"homework0\", \"PEOPLE_PER_SMALL\")\n    @with_import_constant(\"homework0\", \"DIAMETER_LARGE\")\n    @with_import_constant(\"homework0\", \"DIAMETER_MEDIUM\")\n    @with_import_constant(\"homework0\", \"DIAMETER_SMALL\")\n    @with_import_constant(\"homework0\", \"COST_LARGE\")\n    @with_import_constant(\"homework0\", \"COST_MEDIUM\")\n    @with_import_constant(\"homework0\", \"COST_SMALL\")\n    @with_import_constant(\"homework0\", \"PI\")\n    @with_import(\"homework0\", \"main\")\n    def test(main, monkeypatch, capsys, constants=dict()):\n        monkeypatch.setattr(builtins, 'input', mocked_input_maker(numPeople, tipPercent))\n    \n        # merge in the globals from imported main, in order to keep necessary namespace\n        imported_globals = main.__globals__\n        home_globals = globals()\n        merged_globals = imported_globals | home_globals\n    \n        # Change the globals referred to by the main function to the globals of this module\n        # This is done by making a new function object, since __globals__ is read-only\n        main = copy_func(main, merged_globals, module=__name__)\n    \n        main()\n    \n    \n        observed = capsys.readouterr().out\n        expected = f\"Please enter how many guests to order for:\\n{nLarge} large pizzas, {nMedium} medium pizzas, and {nSmall} small pizzas will be needed.\\n\\nA total of {totalArea} square inches of pizza will be ordered ({indvArea} per guest).\\nPlease enter the tip as a percentage (i.e. 10 means 10%):\\nThe total cost of the event will be: ${totalCost}.\\n\\n\"\n>       assert observed == expected\nE       AssertionError: assert '' == 'Please enter...: $59.29.\\n\\n'\nE         - Please enter how many guests to order for:\nE         - 1 large pizzas, 0 medium pizzas, and 1 small pizzas will be needed.\nE         - \nE         - A total of 3418.05 square inches of pizza will be ordered (227.87 per guest).\nE         - Please enter the tip as a percentage (i.e. 10 means 10%):\nE         - The total cost of the event will be: $59.29.\nE         -\n\ntest_homework0.py:80: AssertionError",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 3,
            "name": "test_homework0.py::test_16_person_80_tip",
            "output": "\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x111958bd0>\ncapsys = <_pytest.capture.CaptureFixture object at 0x11195b750>\n\n    @max_score(3)\n    def test_16_person_80_tip(monkeypatch, capsys):\n>   \tmake_test([16, 80], ['1', '0', '1', '3418.05', '213.63', '79.06'], doubled_constants)(monkeypatch, capsys)\n\ntest_homework0.py:133: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\n/Users/prestonraab/.local/lib/python3.11/site-packages/byu_pytest_utils/utils.py:73: in new_test_function\n    return test_function(func, *args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nmain = <function main at 0x11199c0e0>, monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x111958bd0>\ncapsys = <_pytest.capture.CaptureFixture object at 0x11195b750>\nconstants = {'COST_LARGE': 14.68, 'COST_MEDIUM': 11.48, 'COST_SMALL': 7.28, 'DIAMETER_LARGE': 20, ...}\n\n    @with_import_constant(\"homework0\", \"PEOPLE_PER_LARGE\")\n    @with_import_constant(\"homework0\", \"PEOPLE_PER_MEDIUM\")\n    @with_import_constant(\"homework0\", \"PEOPLE_PER_SMALL\")\n    @with_import_constant(\"homework0\", \"DIAMETER_LARGE\")\n    @with_import_constant(\"homework0\", \"DIAMETER_MEDIUM\")\n    @with_import_constant(\"homework0\", \"DIAMETER_SMALL\")\n    @with_import_constant(\"homework0\", \"COST_LARGE\")\n    @with_import_constant(\"homework0\", \"COST_MEDIUM\")\n    @with_import_constant(\"homework0\", \"COST_SMALL\")\n    @with_import_constant(\"homework0\", \"PI\")\n    @with_import(\"homework0\", \"main\")\n    def test(main, monkeypatch, capsys, constants=dict()):\n        monkeypatch.setattr(builtins, 'input', mocked_input_maker(numPeople, tipPercent))\n    \n        # merge in the globals from imported main, in order to keep necessary namespace\n        imported_globals = main.__globals__\n        home_globals = globals()\n        merged_globals = imported_globals | home_globals\n    \n        # Change the globals referred to by the main function to the globals of this module\n        # This is done by making a new function object, since __globals__ is read-only\n        main = copy_func(main, merged_globals, module=__name__)\n    \n        main()\n    \n    \n        observed = capsys.readouterr().out\n        expected = f\"Please enter how many guests to order for:\\n{nLarge} large pizzas, {nMedium} medium pizzas, and {nSmall} small pizzas will be needed.\\n\\nA total of {totalArea} square inches of pizza will be ordered ({indvArea} per guest).\\nPlease enter the tip as a percentage (i.e. 10 means 10%):\\nThe total cost of the event will be: ${totalCost}.\\n\\n\"\n>       assert observed == expected\nE       AssertionError: assert '' == 'Please enter...: $79.06.\\n\\n'\nE         - Please enter how many guests to order for:\nE         - 1 large pizzas, 0 medium pizzas, and 1 small pizzas will be needed.\nE         - \nE         - A total of 3418.05 square inches of pizza will be ordered (213.63 per guest).\nE         - Please enter the tip as a percentage (i.e. 10 means 10%):\nE         - The total cost of the event will be: $79.06.\nE         -\n\ntest_homework0.py:80: AssertionError",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 2,
            "name": "test_homework0.py::test_17_person_10_tip",
            "output": "\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x111955150>\ncapsys = <_pytest.capture.CaptureFixture object at 0x111955990>\n\n    @max_score(2)\n    def test_17_person_10_tip(monkeypatch, capsys):\n>   \tmake_test([17, 10], ['1', '0', '2', '4322.83', '254.28', '64.33'], doubled_constants)(monkeypatch, capsys)\n\ntest_homework0.py:137: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\n/Users/prestonraab/.local/lib/python3.11/site-packages/byu_pytest_utils/utils.py:73: in new_test_function\n    return test_function(func, *args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nmain = <function main at 0x11199c540>, monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x111955150>\ncapsys = <_pytest.capture.CaptureFixture object at 0x111955990>\nconstants = {'COST_LARGE': 14.68, 'COST_MEDIUM': 11.48, 'COST_SMALL': 7.28, 'DIAMETER_LARGE': 20, ...}\n\n    @with_import_constant(\"homework0\", \"PEOPLE_PER_LARGE\")\n    @with_import_constant(\"homework0\", \"PEOPLE_PER_MEDIUM\")\n    @with_import_constant(\"homework0\", \"PEOPLE_PER_SMALL\")\n    @with_import_constant(\"homework0\", \"DIAMETER_LARGE\")\n    @with_import_constant(\"homework0\", \"DIAMETER_MEDIUM\")\n    @with_import_constant(\"homework0\", \"DIAMETER_SMALL\")\n    @with_import_constant(\"homework0\", \"COST_LARGE\")\n    @with_import_constant(\"homework0\", \"COST_MEDIUM\")\n    @with_import_constant(\"homework0\", \"COST_SMALL\")\n    @with_import_constant(\"homework0\", \"PI\")\n    @with_import(\"homework0\", \"main\")\n    def test(main, monkeypatch, capsys, constants=dict()):\n        monkeypatch.setattr(builtins, 'input', mocked_input_maker(numPeople, tipPercent))\n    \n        # merge in the globals from imported main, in order to keep necessary namespace\n        imported_globals = main.__globals__\n        home_globals = globals()\n        merged_globals = imported_globals | home_globals\n    \n        # Change the globals referred to by the main function to the globals of this module\n        # This is done by making a new function object, since __globals__ is read-only\n        main = copy_func(main, merged_globals, module=__name__)\n    \n        main()\n    \n    \n        observed = capsys.readouterr().out\n        expected = f\"Please enter how many guests to order for:\\n{nLarge} large pizzas, {nMedium} medium pizzas, and {nSmall} small pizzas will be needed.\\n\\nA total of {totalArea} square inches of pizza will be ordered ({indvArea} per guest).\\nPlease enter the tip as a percentage (i.e. 10 means 10%):\\nThe total cost of the event will be: ${totalCost}.\\n\\n\"\n>       assert observed == expected\nE       AssertionError: assert '' == 'Please enter...: $64.33.\\n\\n'\nE         - Please enter how many guests to order for:\nE         - 1 large pizzas, 0 medium pizzas, and 2 small pizzas will be needed.\nE         - \nE         - A total of 4322.83 square inches of pizza will be ordered (254.28 per guest).\nE         - Please enter the tip as a percentage (i.e. 10 means 10%):\nE         - The total cost of the event will be: $64.33.\nE         -\n\ntest_homework0.py:80: AssertionError",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 3,
            "name": "test_homework0.py::test_100_person_80_tip",
            "output": "\nmonkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x10d7c3f50>\ncapsys = <_pytest.capture.CaptureFixture object at 0x10d7c1590>\n\n    @max_score(3)\n    def test_100_person_80_tip(monkeypatch, capsys):\n>   \tmake_test([100, 80], ['7', '0', '1', '18497.70', '184.98', '396.14'], doubled_constants)(monkeypatch, capsys)\n\ntest_homework0.py:141: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\nbyu_pytest_utils_extra.py:36: in new_test_function\n    return test_function(*args, **kwargs)\n/Users/prestonraab/.local/lib/python3.11/site-packages/byu_pytest_utils/utils.py:73: in new_test_function\n    return test_function(func, *args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nmain = <function main at 0x11199c180>, monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x10d7c3f50>\ncapsys = <_pytest.capture.CaptureFixture object at 0x10d7c1590>\nconstants = {'COST_LARGE': 14.68, 'COST_MEDIUM': 11.48, 'COST_SMALL': 7.28, 'DIAMETER_LARGE': 20, ...}\n\n    @with_import_constant(\"homework0\", \"PEOPLE_PER_LARGE\")\n    @with_import_constant(\"homework0\", \"PEOPLE_PER_MEDIUM\")\n    @with_import_constant(\"homework0\", \"PEOPLE_PER_SMALL\")\n    @with_import_constant(\"homework0\", \"DIAMETER_LARGE\")\n    @with_import_constant(\"homework0\", \"DIAMETER_MEDIUM\")\n    @with_import_constant(\"homework0\", \"DIAMETER_SMALL\")\n    @with_import_constant(\"homework0\", \"COST_LARGE\")\n    @with_import_constant(\"homework0\", \"COST_MEDIUM\")\n    @with_import_constant(\"homework0\", \"COST_SMALL\")\n    @with_import_constant(\"homework0\", \"PI\")\n    @with_import(\"homework0\", \"main\")\n    def test(main, monkeypatch, capsys, constants=dict()):\n        monkeypatch.setattr(builtins, 'input', mocked_input_maker(numPeople, tipPercent))\n    \n        # merge in the globals from imported main, in order to keep necessary namespace\n        imported_globals = main.__globals__\n        home_globals = globals()\n        merged_globals = imported_globals | home_globals\n    \n        # Change the globals referred to by the main function to the globals of this module\n        # This is done by making a new function object, since __globals__ is read-only\n        main = copy_func(main, merged_globals, module=__name__)\n    \n        main()\n    \n    \n        observed = capsys.readouterr().out\n        expected = f\"Please enter how many guests to order for:\\n{nLarge} large pizzas, {nMedium} medium pizzas, and {nSmall} small pizzas will be needed.\\n\\nA total of {totalArea} square inches of pizza will be ordered ({indvArea} per guest).\\nPlease enter the tip as a percentage (i.e. 10 means 10%):\\nThe total cost of the event will be: ${totalCost}.\\n\\n\"\n>       assert observed == expected\nE       AssertionError: assert '' == 'Please enter... $396.14.\\n\\n'\nE         - Please enter how many guests to order for:\nE         - 7 large pizzas, 0 medium pizzas, and 1 small pizzas will be needed.\nE         - \nE         - A total of 18497.70 square inches of pizza will be ordered (184.98 per guest).\nE         - Please enter the tip as a percentage (i.e. 10 means 10%):\nE         - The total cost of the event will be: $396.14.\nE         -\n\ntest_homework0.py:80: AssertionError",
            "visibility": "visible"
        }
    ]
}